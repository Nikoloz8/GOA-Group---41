#python-ში გვაქვს return ოპერატორი, რომელიც გამოიყენება მნიშვნელობების დასაბრუნებლად.
def numbers(a, b): # ფრჩხილებში ჩვენს შექმნილ ფუნქციას გადაეცემა პარამეტრები. თუ ამ პარამეტრების შესაბამის ცვლადებს შევქმნით ქვევით
    return a + b   # მაშინ return შეასრულებს თავის ფუნქციას და a-ს დაუმატებს b-ს.

sum = numbers(5, 8)
print(sum)

#ზოგადად პითონში ჩაშენებული ფუნქციები ყოველთვის რაღაცას აბრუნებენ, თუმცა მას არ ბეჭდავენ. მსგავსი რაღაცაა აქ ახსნილი return-იც. ზუსტად იგივე მნიშვნელობა აქვს ამ return-ს ჩვენს შექმნილ ფუნქციებში, როგორ პითონში ჩაშენებულ ფუნქციებში. მაგალითად ფუნქცია len()

Sasisqi = "Mowowniki"
len(Sasisqi)  #აქ len ფუნქცია აბრუნებს მოწოწნიკის სიგრძეს, თუმცა არ ბეჭდავს მას. ფაქტობრივად იგი იყენებს return ოპერატორს.
#ჩვენს მიერ შექმნილი ფუნქციის შიგნით პრინტის მაგივრად ყოველთვის გამოვიყენოთ return!

def odd_even():
    odd_or_even = int(input("Enter any number: "))
    if odd_or_even % 2 == 0:
        return "Your number is even!"
    else:
        return "Your number is odd!"
print(odd_even( ))


def say_hello(name): #name არის ფუნქციის პარამეტრი. ეს დაახლოებით იგივეა, რაც ფუნქციის არგუმენტი. პითონში ჩაშენებული ფუნქციების
    return "hello" + name #ფრჩხილებში მოქცეულ ნებისმიერ რამეს ეწოდება არგუმენტი!
print(say_hello(" Nika"))     #აქ ჩასმული ნიკა წავა ზევით, ჩაჯდება name-ს ადგილას, შემდეგ ჩამოვა return-თან, შეავსებს 
                              #name-ს და return ოპერატორი დააბრუნებს შედეგს.
                              #გავითვალისწინოთ, რომ არგუმენტების რაოდენობა აუცილებლად ემთხვევა პარამეტრების რაოდენობას!

def age(my_age):
    return my_age
print(age(16))